PROJECT(torrent)

SET(SRCS
	src/alert.cpp
	src/assert.cpp
	src/broadcast_socket.cpp
	src/bt_peer_connection.cpp
	src/connection_queue.cpp
	src/create_torrent.cpp
	src/disk_buffer_holder.cpp
	src/disk_io_thread.cpp
	src/entry.cpp
	src/enum_net.cpp
	src/error_code.cpp
	src/escape_string.cpp
	src/file_pool.cpp
	src/file_storage.cpp
	src/gzip.cpp
	src/http_connection.cpp
	src/http_parser.cpp
	src/http_stream.cpp
	src/http_tracker_connection.cpp
	src/identify_client.cpp
	src/instantiate_connection.cpp
	src/ip_filter.cpp
	src/lazy_bdecode.cpp
	src/logger.cpp
	src/lsd.cpp
	src/magnet_uri.cpp
#	src/mapped_storage.cpp
	src/natpmp.cpp
	src/parse_url.cpp
	src/peer_connection.cpp
	src/piece_picker.cpp
	src/policy.cpp
	src/session.cpp
	src/session_impl.cpp
	src/sha1.cpp
	src/socks4_stream.cpp
	src/socks5_stream.cpp
	src/stat.cpp
	src/storage.cpp
	src/torrent.cpp
	src/torrent_handle.cpp
	src/torrent_info.cpp
	src/tracker_manager.cpp
	src/udp_socket.cpp
	src/udp_tracker_connection.cpp
	src/upnp.cpp
	src/web_peer_connection.cpp

	# -- extensions --
	src/metadata_transfer.cpp
	src/smart_ban.cpp
	src/ut_pex.cpp
	src/ut_metadata.cpp
)

SET(KADEMLIA_SRCS
	src/kademlia/closest_nodes.cpp
	src/kademlia/dht_tracker.cpp
	src/kademlia/node.cpp
	src/kademlia/refresh.cpp
	src/kademlia/rpc_manager.cpp
	src/kademlia/find_data.cpp
	src/kademlia/node_id.cpp
	src/kademlia/routing_table.cpp
	src/kademlia/traversal_algorithm.cpp
)

SET(ZLIB_SRCS
	zlib/adler32.c
	zlib/compress.c
	zlib/crc32.c
	zlib/deflate.c
	zlib/gzio.c
	zlib/infback.c
	zlib/inffast.c
	zlib/inflate.c
	zlib/inftrees.c
	zlib/trees.c
	zlib/uncompr.c
	zlib/zutil.c
)

SET(LIBLINK "")

SET(MYDEF "-D_FILE_OFFSET_BITS=64 -DBOOST_MULTI_INDEX_DISABLE_SERIALIZATION")
SET(MYDEF "${MYDEF} -DBOOST_THREAD_USE_LIB -DTORRENT_BUILDING_SHARED")

#BUILD_VARIANT
SET(VARIANT "Release" CACHE STRING "Build Variant: Debug or Release")
IF(${VARIANT} MATCHES "Debug")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
		SET(MYDEF "${MYDEF} -export-dynamic -rdynamic")
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
ELSE()
	SET(MYDEF ${MYDEF} -DNDEBUG)	
ENDIF(${VARIANT} MATCHES "Debug")

#TOOLSET
SET(TOOLSET GCC CACHE STRING "Toolset: GCC, MSVC, XCODE")
IF(${TOOLSET} MATCHES "MSVC")
	# get settings from Jamfile
ELSE()
	# get settings from Jamfile
ENDIF(${TOOLSET} MATCHES "MSVC")


#TCMALLOC: NO YES
OPTION(TCMALLOC "" OFF)
IF(${TCMALLOC} MATCHES ON)
	SET(LIBLINK ${LIBLINK} tcmalloc)
ENDIF(${TCMALLOC} MATCHES ON)


#NEED_LIBRT: YES NO
OPTION(NEED_LIBRT "" OFF)
IF(${NEED_LIBRT} MATCHES ON)
	SET(LIBLINK rt)
ENDIF(${NEED_LIBRT} MATCHES ON)


#POOL_ALLOCATORS: ON OFF
OPTION(POOL_ALLOCATORS "" ON)
IF(${POOL_ALLOCATORS} MATCHES OFF)
	SET(MYDEF "${MYDEF} -DTORRENT_DISABLE_POOL_ALLOCATOR")
ENDIF(${POOL_ALLOCATORS} MATCHES OFF)


#GEOIP: SHARED STATIC OFF
SET(GEOIP "Static" CACHE STRING "GeoIP support: Off, Static, Shared")
IF(${GEOIP} MATCHES "Off")
	SET(MYDEF "${MYDEF} -DTORRENT_DISABLE_GEO_IP")
ELSE()
	IF(${GEOIP} MATCHES "Shared")
		SET(LIBLINK ${LIBLINK} GeoIP)
	ENDIF(${GEOIP} MATCHES "Shared")
	IF(${GEOIP} MATCHES "Static")
		SET(SRCS ${SRCS} src/GeoIP.c)
	ENDIF(${GEOIP} MATCHES "Static")
ENDIF(${GEOIP} MATCHES "Off")


#BANDWIDTH_LIMIT_LOGGING: OFF ON
OPTION(BANDWIDTH_LIMIT_LOGGING "" OFF)
IF(${BANDWIDTH_LIMIT_LOGGING} MATCHES ON)
	SET(MYDEF "${MYDEF} -DTORRENT_VERBOSE_BANDWIDTH_LIMIT")
ENDIF(${BANDWIDTH_LIMIT_LOGGING} MATCHES ON)


#INVARIANT_CHECKS: ON OFF
OPTION(INVARIANT_CHECKS "" ON)
IF(${INVARIANT_CHECKS} MATCHES OFF)
	SET(MYDEF "${MYDEF} -DTORRENT_DISABLE_INVARIANT_CHECKS")
ENDIF(${INVARIANT_CHECKS} MATCHES OFF)


#DISK_STATS: OFF ON
OPTION(DISK_STATS "" OFF)
IF(${DISK_STATS} MATCHES ON)
	SET(MYDEF "${MYDEF} -DTORRENT_DISK_STATS")
ENDIF(${DISK_STATS} MATCHES ON)


#MEMDEBUG: OFF ON
OPTION(MEMDEBUG "" OFF)
IF(${MEMDEBUG} MATCHES ON)
	SET(SRCS ${SRCS} src/memdebug.cpp)
	SET(MYDEF "${MYDEF} -DTORRENT_MEMDEBUG")
ENDIF(${MEMDEBUG} MATCHES ON)


#LOGGING: NONE DEFAULT ERROR VERBOSE
SET(LOGGING "None" CACHE STRING "Logging: None, Default, Error, Verbose")
IF(${LOGGING} MATCHES "None")
ELSE()
	IF(${LOGGING} MATCHES "Default")
		SET(MYDEF "${MYDEF} -DTORRENT_LOGGING")
	ENDIF(${LOGGING} MATCHES "Default")
	IF(${LOGGING} MATCHES "Verbose")
		SET(MYDEF "${MYDEF} -DTORRENT_VERBOSE_LOGGING")
	ENDIF(${LOGGING} MATCHES "Verbose")
	IF(${LOGGING} MATCHES "Error")
		SET(MYDEF "${MYDEF} -DTORRENT_ERROR_LOGGING")
	ENDIF(${LOGGING} MATCHES "Error")
ENDIF(${LOGGING} MATCHES "None")


#DHT_SUPPORT: ON OFF LOGGING
SET(DHT "On" CACHE STRING "DHT Support: On, Off, Logging")
IF(${DHT} MATCHES "Off")
	SET(MYDEF "${MYDEF} -DTORRENT_DISABLE_DHT")
ELSE()
	SET(SRCS ${SRCS} ${KADEMLIA_SRCS})
	IF(${DHT} MATCHES "Logging")
		SET(MYDEF "${MYDEF} -DTORRENT_DHT_VERBOSE_LOGGING")
	ENDIF(${DHT} MATCHES "Logging")
ENDIF(${DHT} MATCHES "Off")


#OPENSSL: PE SHA_1 OFF
SET(OPENSSL "PE" CACHE STRING "Openssl support: PE, SHA_1, Off")
IF(${OPENSSL} MATCHES "Off")
	SET(SRCS ${SRCS} src/sha1.cpp)
	SET(MYDEF "${MYDEF} -DTORRENT_DISABLE_ENCRYPTION")
ELSE(${OPENSSL} MATCHES "Off")
	IF(WIN32)
		SET(LIBLINK ${LIBLINK} gdi32)
		IF(NOT GCC)
			SET(LIBLINK ${LIBLINK} ssleay32 libeay32 advapi32 user32 shell32)
		ELSE()
			SET(LIBLINK ${LIBLINK} ws2_32 wsock32)
			SET(MYDEF "${MYDEF} -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0500")
			SET(MYDEF "${MYDEF} -D__USE_W32_SOCKETS -DWIN32 -D_WIN32")
		ENDIF(NOT GCC)
	ELSE(WIN32)
		SET(LIBLINK ${LIBLINK} crypto ssl)
	ENDIF(WIN32)
	
	IF(${OPENSSL} MATCHES "PE")
		SET(SRCS ${SRCS} src/pe_crypto.cpp)
		SET(MYDEF "${MYDEF} -DTORRENT_USE_OPENSSL")
	ENDIF(${OPENSSL} MATCHES "PE")
	IF(${OPENSSL} MATCHES "SHA_1")
		SET(MYDEF "${MYDEF} -DTORRENT_USE_OPENSSL -DTORRENT_DISABLE_ENCRYPTION")
	ENDIF(${OPENSSL} MATCHES "SHA_1")
ENDIF(${OPENSSL} MATCHES "Off")


#RESOLVE_COUNTRIES: ON OFF
OPTION(RESOLVE_COUNTRIES "" ON)
IF(${RESOLVE_COUNTRIES} MATCHES OFF)
	SET(MYDEF "${MYDEF} -DTORRENT_DISABLE_RESOLVE_COUNTRIES")
ENDIF(${RESOLVE_COUNTRIES} MATCHES OFF)



#CHARACTER_SET: ANSI UNICODE
SET(CHARACTER_SET ANSI CACHE STRING "UNICODE or ANSI")
IF(${CHARACTER_SET} MATCHES "UNICODE")
	SET(MYDEF "${MYDEF} -D_UNICODE -DUNICODE")
ENDIF(${CHARACTER_SET} MATCHES "UNICODE")


#ZLIB: SHIPPED SYSTEM
SET(ZLIB SHIPPED CACHE STRING "Zlib support: SHIPPED or SYSTEM")
IF(${ZLIB} MATCHES SYSTEM)
	SET(LIBLINK ${LIBLINK} z)
ELSE()
	INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ./zlib)
	SET(SRCS ${SRCS} ${ZLIB_SRCS})
ENDIF(${ZLIB} MATCHES SYSTEM)


#STATISTICS: OFF ON
OPTION(STATISTICS "" OFF)
IF(${STATISTICS} MATCHES ON)
	SET(MYDEF "${MYDEF} -DTORRENT_STATS")
ENDIF(${STATISTICS} MATCHES ON)


#UPNP_LOGGING: OFF ON
OPTION(UPNP_LOGGING "" OFF)
IF(${UPNP_LOGGING} MATCHES ON)
	SET(MYDEF "${MYDEF} -DTORRENT_UPNP_LOGGING")
ENDIF(${UPNP_LOGGING} MATCHES ON)


#BOOST: SYSTEM SOURCE
SET(BOOST SYSTEM CACHE STRING "Boost library: SYSTEM or SOURCE")
IF(${BOOST} MATCHES "SYSTEM")
	FIND_PACKAGE(Boost)
	IF(${Boost_FOUND})
		INCLUDE_DIRECTORIES(
			${INCLUDE_DIRECTORIES}
			${Boost_INCLUDE_DIRS}
			#/opt/local/include/boost-1_35
			#/opt/local/include/boost
		)
		LINK_DIRECTORIES(${LINK_DIRECTORIES} ${Boost_LIBRARY_DIRS})
	ENDIF(${Boost_FOUND})
	SET(LIBLINK ${LIBLINK} boost_filesystem-mt boost_thread-mt boost_iostreams-mt)
ELSE()
	SET(LIBLINK ${LIBLINK} 
		/boost/thread//boost_thread
		/boost/filesystem//boost_filesystem
		/boost/iostreams//boost_iostreams
		/boost/system//boost_system
	)
	INCLUDE_DIRECTORIES(
		${INCLUDE_DIRECTORIES}
		${BOOST_ROOT}
	)
	SET(MYDEF "${MYDEF} -DBOOST_ALL_NO_LIB")
ENDIF(${BOOST} MATCHES "SYSTEM")


#DEBUG_ITERATORS: OFF ON
OPTION(DEBUG_ITERATORS "" OFF)
IF(${DEBUG_ITERATORS} MATCHES ON)
	SET(MYDEF "${MYDEF} -D_SCL_SECURE=1 -D_GLIBCXX_DEBUG")
ENDIF(${DEBUG_ITERATORS} MATCHES ON)


#TEST_COVERAGE: OFF ON
OPTION(TEST_COVERAGE "" OFF)
IF(${TEST_COVERAGE} MATCHES ON)
	IF(NOT WIN32) # gcc && darwin
		SET(MYDEF "${MYDEF} -fprofile-arcs -ftest-coverage")
	ENDIF(NOT WIN32)
ENDIF(${TEST_COVERAGE} MATCHES ON)



IF(WIN32)
	SET(SRCS
		${SRCS}
		src/file_win.cpp
	)
ENDIF(WIN32)

IF(UNIX)
	#SET(SRCS ${SRCS} src/assert.cpp)
	SET(SRCS ${SRCS} src/file.cpp)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
		SET(LIBLINK ${LIBLINK} boost_system-mt)
	ELSE(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
ENDIF(UNIX)

ADD_DEFINITIONS(${MYDEF})

INCLUDE_DIRECTORIES(
	${INCLUDE_DIRECTORIES}
	./include
	./include/libtorrent
)

LINK_DIRECTORIES(
	${LINK_DIRECTORIES}
	/opt/local/lib
	/usr/lib
	/usr/local/lib
	/sw/lib
)

#LINK_LIBRARIES()
ADD_LIBRARY(torrent SHARED ${SRCS})
TARGET_LINK_LIBRARIES(torrent ${LIBLINK})
