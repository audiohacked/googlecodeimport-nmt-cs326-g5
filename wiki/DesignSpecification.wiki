#summary We can do our design specification here.

=Digital Content Distribution and Publishing System=
==Team # 5==

=Design Specification=

==1. Project Overview==

The program will provide a cross-platform content distribution and publishing service. It will use a client-server model where the server will use and provide service through standard programs/services like Apache and MySQL. The customer can choose to use the server to distribute published files or allow users to upload their own content that can be sponsored/featured on the server.

The motivation for this project is the lack of a general-purpose, platform-independent content distribution service in the market.  Many content distribution services, such as Valve's Steam platform for game distribution, Apple's iTunes service for music distribution, or Netflix's online movie watching software, have some form of platform-dependency (whether it be a an operating system or browser) and/or are content-specific; this is to say that they allow the distribution of only certain forms of digital content.


===1.1 Scope and Objectives===

The scope of the project is to build a base platform for customers to create a digital community and publishing system while also supporting at least Linux, Windows, and Mac user alike. The main function of the system is to provide an end-user a way to obtain any digital content, such as movies, music, and other entertainment. The system has to be fast, native-looking, and easily changeable/upgradeable. To insure the user's client is up to date, it will include an self updater. To facilitate downloading, the client will use bittorrent and http/ftp. Finally, the client can also be configured to include Community Portal and/or a web browser.

===1.2 Supplementary Requirements===

*FURPS Non-functional Requirements (Quality)*

_Usability_
  * Users familiar with other content distribution platforms and file transfer clients should feel at ease with this system.
  * User interface should always strive for simplicity and intuitiveness.
  * User interface should follow a tabbed system to divide functionality and reduce complexity.

_Reliability_
  * The entire system must be robust enough to handle common networking issues like dropped connections, missing files, and transfer errors.
  * User authentication system should use common security practices.

_Performance_
  * File transfers should initiate within two seconds of a client's request.
  * Content server should responsibly manage available bandwidth to achieve optimal browsing and transfer speeds.

_Supportability_
  * Content server's closed website system should be mostly dynamic, adapting to file additions/removals as well as changes in existing files' properties.

*FURPS+ Additional Non-functional Requirements (Constraints)*

_Implementation_
  * The client will be implemented in C++, utilizing the gtkWidgets library for cross-platform code.

==2. Customer Requirements==
*Use-Case Diagram - Entire System*

http://nmt-cs326-g5.googlecode.com/files/usecasev2_2.jpeg

*Actor Descriptions and Use-Cases by Actor*

`BasicUser` - the target audience for downloads, uses the client software.

http://nmt-cs326-g5.googlecode.com/files/UseCase_BasicUser.jpeg

----

`ContentDistributor` - the manager of the Centralized Content Server, inherits functionality from Basic User.

http://nmt-cs326-g5.googlecode.com/files/UseCase_ContentDistributor.jpeg

----

`DBManager` - provides storage and retrieval for information on downloads. This includes file location, file attributes, statistics including number of downloads, and other vital information.

http://nmt-cs326-g5.googlecode.com/files/UseCase_Database.jpeg

----

`ContentServer` - communicates with the client software and the database. Is responsible for communication between client and database.

http://nmt-cs326-g5.googlecode.com/files/UseCase_ContentServer.jpeg

----

`Tracker` - communicates with the client software during a torrent download to provide connection information to peers.

http://nmt-cs326-g5.googlecode.com/files/UseCase_Tracker.jpeg


*Deployment Diagram*

http://nmt-cs326-g5.googlecode.com/files/DeploymentDiagram.jpeg


==3. Architectural Design==

Briefly overview your architectural design. Discuss alternatives examined. Indicate why the architecture discussed in section 3.1 & 3.2 was chosen and why the alternatives were eliminated. 

MVC is the architecture we chose because it most completely represents the intended goals of our project. Other architectures examined were client-server and peer to peer. While these architectures may represent parts of our design, they don't represent the whole. Client-server would be a poor choice in the case of a database driven application such as our own, where a central database server exists that must be secure.

===3.1 Subsystem Architecture===

This section should include a subsystem dependency diagram and supporting discussion. 
http://nmt-cs326-g5.googlecode.com/files/subsystem_architecture_v1.jpeg

This diagram is divided into three distinct layers; model, view, and controller.  Following the MVC architecture and philosophy, subsystems performing boundary actions are in the view layer.  These subsystems consist of the User Interface (composed of the GUI and in-house web browser subsystems) and the Server subsystem.  The User Interface handles virtually every interaction with the user, the Server subsystem represents the centralized content server with which the client interacts.

The controller layer consists of subsystems which perform the vast majority of business logic for the application.  This layer contains the wxWidgets, Transfer Manager, Database Manager, and Content Manager subsystems.  The wxWidgets system represents the wxWidgets API, which allows our application to be platform-independent and is responsible for rendering the client and implementing the web browser.  The TransferManager is an abstract subsystem, realized by two subsystems, the HTTP Transfer Manager and the Torrent Transfer Manager, which handle and implement the code to perform transfers over their respective protocols between clients and the centralized content server, as well as between clients (in the case of a torrent transfer) and a tracker.  The Database Manager subsystem is responsible for handling requests from both client and server concerning the centralized database, as well as connecting to and performing transactions with that database.  Finally, the Content Manager subsystem is a server-side subsystem which manages requests for files from clients.  The Content Manager also provides the necessary functionality to perform user authentication and administrative actions for users who are "Content Distributors".  

The lowest level of the architecture is the model layer, and is comprised of only three subsystems; an OS-specific GUI Library, the Local File System, and a mySQL Database.   The OS-specific GUI Library is a dynamic system, controlled by the wxWidgets subsystem to perform rendering actions on a specific operating system.  The internal class hierarchy related to these subsystems follows a bridge design pattern for separating the implementation of GUI concepts (windows, menus, dialogs, etc.) from an OS-specific implementation of those concepts.  The second subsystem, the Local File System, is also a generic subsystem which is largely implemented by system API's.  This subsystem is responsible for storing files which are downloaded to clients and uploaded by clients to the content server.  Finally, the third subsystem, the mySQL Database, consists of the actual relational schema and physical tables of application data in the mySQL DBMS.  This subsystem is controlled exclusively by the Database Manager subsystem.


===3.2 Deployment Model===

http://nmt-cs326-g5.googlecode.com/files/deployment_diagram_v2.JPG

The deployment model for the application is fairly traditional; client-side systems are mapped to the client executable, server systems (Content Manager) are mapped to a server side applet, and the database subsystem is mapped to a mySQL database.  One content server supports many clients, and one database instance is tied to one server.  

==4. Use Case Realization Design==

For each use case a sequence diagram depicting important interactions among subsystems, interfaces, & architecturally significant design classes as well as class diagrams depicting relationships among interaction participants. E.g., one sequence diagram and one class diagram per use case.

Specific use case descriptions and sequence diagrams:

_Use Case Name_      *`DownloadFile`* _(Also applies to *'DownloadHTTPFile'*)_

*Sequence Diagram*

http://nmt-cs326-g5.googlecode.com/files/seq_abstractdownload.jpeg

http://nmt-cs326-g5.googlecode.com/files/downloadFileClassDiagram.png

----

_Use Case Name_        *`DownloadTorrentFile`*

http://nmt-cs326-g5.googlecode.com/files/seq_downloadtorrentfile.jpg

http://nmt-cs326-g5.googlecode.com/files/downloadTorrentFileClassDiagram.png

----

_Use Case Name_      *`ReportFileDownload`*

*Sequence Diagram*

http://nmt-cs326-g5.googlecode.com/files/seq_reportfiledownload.jpeg

http://nmt-cs326-g5.googlecode.com/files/reportFileDownloadClassDiagram.png
----

_Use Case Name_  *`ReportFileUpload`*

*Sequence Diagram*

http://nmt-cs326-g5.googlecode.com/files/seq_reportfileupload.jpeg

----

_Use Case Name_  *`UploadFile`*

*Activity Diagram*

http://nmt-cs326-g5.googlecode.com/files/act_upload.jpeg

http://nmt-cs326-g5.googlecode.com/files/UploadFileClassDiagram.png
----

_Use Case Name_  *`DesignateFileSponsoredStatus`*

*Activity Diagram*

See the authentication/designation section of the *`UploadFile`* activity diagram.

----

_Use case name_  *`GetFileStatistics`*


http://nmt-cs326-g5.googlecode.com/files/seq_getfilestatistics.jpg

http://nmt-cs326-g5.googlecode.com/files/GetFileStatisticsClassdiagram.png
----

_Use case name_  *`ReportTransferProgress`*

*Sequence Diagram*

http://nmt-cs326-g5.googlecode.com/files/seq_reporttransferprogress2.JPG

http://nmt-cs326-g5.googlecode.com/files/ReportTransferProgressClassD.png

----

_Use case name_  *`BrowseContentSite`*

*Sequence Diagram*

http://nmt-cs326-g5.googlecode.com/files/seq_browsecontent.jpeg

http://nmt-cs326-g5.googlecode.com/files/browseContentSiteClassDiagram.png

----

_Use case name_  *`RemoveFile`*

*Activity Diagram*

http://nmt-cs326-g5.googlecode.com/files/act_removefile.jpeg

----

_Use case name_  *`SetClientPreferences`*

*Sequence Diagram*

http://nmt-cs326-g5.googlecode.com/files/seq_setclientpreferences.jpeg

----

_Use case name_  *`SetServerPreferences`*

*Sequence Diagram*

http://nmt-cs326-g5.googlecode.com/files/seq_setserverpreferences.jpeg

----

_Use Case Name_        *`AbortFileTransfer`*

*Activity Diagram*

http://nmt-cs326-g5.googlecode.com/files/act_aborttransfer.jpeg

----
_Use case name_ *`ExTransferError`*

*Activity Diagram*

http://nmt-cs326-g5.googlecode.com/files/act_exception.jpeg

----
_Use case name_ *`ExFileNotFoundError`*

*Activity Diagram*

See activity diagram for *`ExTransferError`*.

----

_Use case name_ *`ExTorrentTransferError`*

*Activity Diagram*

See activity diagram for *`ExTransferError`*.

----


==5. Subsystem Design==

Subsections 5.1, 5.2, … present the design of each subsystem depicted in the system architecture - one subsection per subsystem. Nested subsystems should be sub-subsections. E.g., section "5.1.1 Subsystem A.1" would present a nested subsystem of subsystem A.
5.1	Subsystem A
Each subsystem design should include a description of subsystem interfaces, a class diagram of subsystem design classes and interfaces, sequence diagrams that depict the internal interactions that support subsystem interfaces, and any nested subsystems.
5.2	Subsystem B …

===5.1 User Interface===

*5.1.1 GUI*

*5.1.2 Web Browser*

*5.1.3 wxWidgets*


===5.2 Transfer Manager===

*5.2.1 HTTP Transfer Manager*

*5.2.2 Torrent Transfer Manager*

===5.3 Database Manager===

===5.4 Content Manager===

==6. Human Interfaces==

Mockup designs for each user interface.

==7. System/Data Dependencies & Requirements==

These are drawn primarily from supplementary requirements.

==8. Testing Plan==

==9. Appendices==

===Database Schemas===

The following is an entity relationship diagram depicting the database:
http://nmt-cs326-g5.googlecode.com/files/db_er.jpeg

===9.1 Project Status===