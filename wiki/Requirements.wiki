#summary We can do our requirements report here.

=Digital Content Distribution and Publishing System=
=Team #5=
==Requirements Specification==

===Project Overview===
The program will provide a cross-platform content distribution and publishing service. It will use a client-server model where the server will use and provide service through standard programs/services like Apache and MySQL. The customer can choose to use the server to distribute published files or allow users to upload their own content that can be sponsored/featured on the server.

===Scope and Objectives===
The scope of the project is to build a base platform for customers to create a digital community and publishing system while also supporting at least Linux, Windows, and Mac user alike. The main function of the system is to provide an end-user a way to obtain digital content like movies, music, and other entertainment. The system has to be fast, native-looking, and easily changeable/upgradeable. To insure the user's client is up to date, it will include an self updater. To facilitate downloading, the client will use bittorrent and http/ftp. Also the client can be configured to include Community Portal and /or a web browser.

===Supplementary Requirements===
Describe the non-functional requirements (grouped according to type â€“ i.e., interface, physical, design, and implementation) identified for this project.
*FURPS Non-functional Requirements (Quality)*

_Usability_
  * Users familiar with other content distribution platforms and file transfer clients should feel at ease with this system.
  * User interface should always strive for simplicity and intuitiveness.
  * User interface should follow a tabbed system to divide functionality and reduce complexity.

_Reliability_
  * The entire system must be robust enough to handle common networking issues like dropped connections, missing files, and transfer errors.
  * User authentication system should use common security practices.

_Performance_
  * File transfers should initiate within two seconds of a client's request.
  * Content server should responsibly manage available bandwidth to achieve optimal browsing and transfer speeds.

_Supportability_
  * Content server's closed website system should be mostly dynamic, adapting to file additions/removals as well as changes in existing files' properties.

*FURPS+ Additional Non-functional Requirements (Constraints)*

_Implementation_
  * The client will be implemented in C++, utilizing the gtkWidgets library for cross-platform code.

===Customer Requirements===
This section contains the architecture view of your use-case model. It includes 
use-case diagram(s), 
actor descriptions and 
prioritized use-case descriptions.

*Use-Case Diagram - Entire System*

http://nmt-cs326-g5.googlecode.com/files/usecasev2_2.jpeg

*Actor Descriptions and Use-Cases by Actor*

_Basic User_ - the target audience for downloads, uses the client software.

http://nmt-cs326-g5.googlecode.com/files/UseCase_BasicUser.jpeg

_Content Distributor/Server Admin_ - the manager of the Centralized Content Server, inherits functionality from Basic User.

http://nmt-cs326-g5.googlecode.com/files/UseCase_ContentDistributor.jpeg

_Database_ - provides storage and retrieval for information on downloads. This includes file location, file attributes, statistics including number of downloads, and other vital information.

http://nmt-cs326-g5.googlecode.com/files/UseCase_Database.jpeg

_Centralized Content Server_ - communicates with the client software and the database.

http://nmt-cs326-g5.googlecode.com/files/UseCase_ContentServer.jpeg

_Tracker_ - communicates with the client software during a torrent download to provide connection information to peers.

http://nmt-cs326-g5.googlecode.com/files/UseCase_Tracker.jpeg

*Detailed Use Cases*
The following are detailed use cases; some use cases also have an activity or sequence diagram in addition to a textual description.

_Use Case Name_    DownloadTorrentFile

_Participating Actors:_

        Initiated by BasicUser

        Communicates with ContentServer, DBServer, Tracker

_Flow of events:_

1. *BasicUser* selects file in file browser portion of program

2. *BasicUser* selects download

3. Client sends out a request to the *ContentServer* for the .torrent file

          4. *ContentServer* queries *DBServer* as to the status of the file

          5. *DBServer* returns status of .torrent file to *ContentServer*

          6. *ContentServer* returns status of .torrent file to *BasicUser*

7. If .torrent file is available, client downloads it from *ContentServer*

8. Client performs checksum on .torrent file to make sure it was transferred successfully

9. Client queries *Tracker* for list of other clients with file or files defined 
by .torrent file

           10. *Tracker* returns list of clients if it exists, error if not

           11. *Tracker* adds client to list of clients downloading file

12. Client queries other clients to find out who had what pieces of file or files

           13. Other clients reply and specify what data is available for download

14. Client downloads files piece by piece

_Entry Condition_
    * The user selects a download package in the interface that includes a torrent file

_Exit Condition_
    * Download completes, all files reside on local hard drive. OR
    * Download is cancelled by user. OR
    * There is a fatal download error

_Quality Requirements_
    * All servers will respond within a certain amount of time, determined by server settings.

*Deployment Diagram*

http://nmt-cs326-g5.googlecode.com/files/DeploymentDiagram.jpeg

==Requirements Analysis== 
===Structural Analysis===

http://nmt-cs326-g5.googlecode.com/files/class%20diagramV2.jpeg

_Boundary_
    * GUI - Provides the user interface, the main interaction between the user and the program. Used to initiate downloads, uploads, browse the content server, and edit user preferences.  Calls the preferenceDialogue when preferences are changed and communicates with the ContentManager class to initiate downloads/uploads.
    * preferenceDialogue - allows the user to edit their preferences relating to the operation of the program, including options related to torrenting and user interface options.

_Control_
    * ContentManager - is the controller that provides the client with all information pertaining to downloads available, browsing the downloads available, user authentication, and uploading of files. Communicates directly with the database server through the DBManager class.
    * TransferManager - provides the interface that the other transfer managers implement
    * TorrentTransferManager - implements methods included in TransferManager and methods specific to torrent downloads, such as connectToTracker()
    * HTTPTransferManager - implements methods included in TransferManager and methods specific to HTTP transfers

_Entity_
    * DBManager - provides an interface to the ContentManager to update and query the database, which provides lists and attributes of downloads and the files that make up the downloads.
    * Download - provides an interface that specific downloads implement that includes methods and attributes that are common to all downloads.
    * TorrentDownload - implements the Download interface and includes methods and attributes that are unique to torrent downloading, such as peerLocations and trackerLocations. Includes one or more file objects.
    * HTTPDownload - implements the Download interface and includes methods and attributes that are unique to HTTP downloads, such as getFileName. Includes one file.
    * file - includes attributes of a file and a method for retrieving those attributes.
===Behavioral Analysis=== 
This section presents a use-case realization for each use-case using sequence diagram and activity diagram.
===User Interface Analysis===
In this section, present a user interface (navigational paths and screen mock-ups).

http://nmt-cs326-g5.googlecode.com/files/winvista.png

http://nmt-cs326-g5.googlecode.com/files/macosx.png

===Validation and Criteria===
Describe how will you assert via testing that you satisfy a use case.
==Appendices==
Appendix
==Project Status==
Report on the progress of your project. Include an updated plan that shows your progress towards completing project tasks.