#summary We can do our requirements report here.

=Digital Content Distribution and Publishing System=
=Team #5=
==Requirements Specification==

===Project Overview===
This program will provide a universal file distribution service. It will use a client-server model whereas the server can be controlled by a specific client. The client can choose to use the server to distribute sponsored files or allow users to upload their own content.
===Scope and Objectives===
Define the scope of the project and the objectives to be satisfied by this project. 
===Supplementary Requirements===
Describe the non-functional requirements (grouped according to type â€“ i.e., interface, physical, design, and implementation) identified for this project.
*FURPS Non-functional Requirements (Quality)*

_Usability_
  * Users familiar with other content distribution platforms and file transfer clients should feel at ease with this system.
  * User interface should always strive for simplicity and intuitiveness.
  * User interface should follow a tabbed system to divide functionality and reduce complexity.

_Reliability_
  * The entire system must be robust enough to handle common networking issues like dropped connections, missing files, and transfer errors.
  * User authentication system should use common security practices.

_Performance_
  * File transfers should initiate within two seconds of a client's request.
  * Content server should responsibly manage available bandwidth to achieve optimal browsing and transfer speeds.

_Supportability_
  * Content server's closed website system should be mostly dynamic, adapting to file additions/removals as well as changes in existing files' properties.

*FURPS+ Additional Non-functional Requirements (Constraints)*

_Implementation_
  * The client will be implemented in C++, utilizing the gtkWidgets library for cross-platform code.

===Customer Requirements===
This section contains the architecture view of your use-case model. It includes 
use-case diagram(s), 
actor descriptions and 
prioritized use-case descriptions.

*Actors*
    * Basic User (human) - the target audience for downloads, uses the client software
    * Content Distributor/Server Admin (human, inherits from user) - the manager of the Centralized Content Server
    * Database - provides storage and retrieval for information on downloads. This includes file location, file attributes, statistics including number of downloads, and other vital information.
    * Centralized Content Server - communicates with the client software and the database.
    * Tracker (for torrents) - communicated with the client software during a torrent download.

*Deployment Diagram*

http://nmt-cs326-g5.googlecode.com/files/DeploymentDiagram.jpeg

==Requirements Analysis== 
===Structural Analysis===
Briefly describe each analysis class (organized according to type - boundary, control, and entity) and class diagrams
_Boundary_
    * GUI - Provides the user interface, the main interaction between the user and the program. Used to initiate downloads, uploads, browse the content server, and edit user preferences.  Calls the preferenceDialogue when preferences are changed and communicates with the ContentManager class to initiate downloads/uploads.
    * preferenceDialogue - allows the user to edit their preferences relating to the operation of the program, including options related to torrenting and user interface options.
_Control_
    * ContentManager - is the controller that provides the client with all information pertaining to downloads available, browsing the downloads available, user authentication, and uploading of files. Communicates directly with the database server through the DBManager class.
    * TransferManager - provides the interface that the other transfer managers implement
    * TorrentTransferManager - implements methods included in TransferManager and methods specific to torrent downloads, such as connectToTracker()
    * HTTPTransferManager - implements methods included in TransferManager and methods specific to HTTP transfers
_Entity_
    * DBManager - provides an interface to the ContentManager to update and query the database, which provides lists and attributes of downloads and the files that make up the downloads.
    * Download - provides an interface that other downloads implement that includes methods and attributes that are common to all downloads.
    * TorrentDownload - implements the Download interface and includes methods and attributes that are unique to torrent downloading, such as peerLocations and trackerLocations. Includes one or more file objects.
    * HTTPDownload - implements the Download interface and includes methods and attributes that are unique to HTTP downloads, such as getFileName. Includes one file.
    * file - includes attributes of a file and a method for retrieving those attributes.
===Behavioral Analysis=== 
This section presents a use-case realization for each use-case using sequence diagram and activity diagram.
===User Interface Analysis===
In this section, present a user interface (navigational paths and screen mock-ups).
===Validation and Criteria===
Describe how will you assert via testing that you satisfy a use case.
==Appendices==
Appendix
==Project Status==
Report on the progress of your project. Include an updated plan that shows your progress towards completing project tasks.